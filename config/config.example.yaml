# Copyright 2015 Joe Beda
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

# Set this to the hostname that shows up when you run `dig -x <IP>` on the your
# external IP address.
#
# Note that if this starts with 4 integers separated by dots (i.e.
# 1.2.3.4.foo.com) some MTAs (hotmail, I'm looking at you) will barf.  You can
# either use a different domain (your email domain) or a bare IP address
# surrounded in brackets.
ptr_hostname: somerandom.domain.from.provider

# SRS is a scheme to rewrite the sender in the envelope.  This helps when
# forwarding to servers that strictly enforce SPF.  However, the risk is that
# you are forwarding SPAM too and the target service may classify you as a
# spammer. See https://support.google.com/mail/answer/175365?hl=en.
#
# However, it  seems to be clear that GMail reliably classifies mail as SPAM
# when the SPF  check hard fails.  I've seen this happen with mail from evite,
# apple and  redfin as they all have '-all' at the end of their SPF policies.
# I'm sure there are others.
srs:
  enable: False

  # This is the domain that is used for SRS. All forwarded mail will be
  # rewritten to be coming from this domain.  You'll probably want an SPF record
  # for this domain also.
  srs_domain: srs.example.com

  # This is a secret used by SRS to make sure that bounces are from mail we
  # actually sent. Generate it with:
  #   dd if=/dev/urandom bs=18 count=1 2>/dev/null | base64
  srs_secret: random base64

# Postscreen sits in front of postfix and looks for suspicious implementations
# that are sending mail.  It also checks a couple of common black lists.
postscreen:
  enable: False

  # More in depth checks from postscreen are implemented via a mechanism where
  # it must return a "temporarily unavailable" message to senders.  For
  # senders that do a reasonable amount of backoff, this could slow down mail
  # delivery dramatically.
  enable_slow_checks: False

# If you are enabling DKIM you must also specify your DKIM selector and key
# for each domain (see below)
dkim:
  enable: True

# This is the set of virtual domains.
virtual_domains:
  example.com:
    accounts:
      # Each account has the following properties:
      # * name: The name that this MTA will send mail as.  This is translated to
      #   name@domain.com.
      # * password: The password used to authenticate for sending mail.  I can't
      #   figure out a way to avoid putting it in plain text here.
      # * forward: Where this account will forward to.  This can either be a
      # * single email address or a list of email addresses.
      # * dot_plus_rewrite: Rewrite 'user.extra@domain.com' to
      #   'forward_user+extra@forward_domain.com' for the main name.  Optional,
      #   defaults to false.
      # * aliases: A list of other email addresses that will forward to the same
      #   place. There is no provision for sending mail *as* these addresses.
      #   Create a new account if you need that. Optional.
      - name: alice
        password: alice_pw
        forward: alice@gmail.com
        dot_plus_rewrite: true
        aliases:
          - al
      - name: bob
        password: bob_pw
        forward:
          - bob1@gmail.com
          - bob2@gmail.com
    dkim:
      # Location of the DKIM key for this domain
      # See README.md for help generating a key.
      key: keys/mydomain.com/mail.private
      selector: mail
  # You can also specify domains in separate YAML files
  example.org: !include domains/example.yaml
